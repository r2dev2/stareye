{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from 'svelte';\n  import { runningStats } from './stats.js';\n  import { pixelReduce } from './store.js';\n\n  const windowSize = 300;\n  const pollIntervalMs = 10;\n\n  // statistics on sum of pixel values\n  const stats = runningStats(windowSize);\n\n  // statistics on z-score of pixel value sums\n  //\n  // We need to take the z-score of a z-score because\n  // different cameras have different noises and resolutions.\n  //\n  // If we hard-coded a bang as all |z-score| above a ridiculously\n  // high 50 for one camera, it won't work for other cameras.\n  //\n  // However, by taking the z-score of z-scores, we've essentially\n  // normalized the noise and can use a reasonable |z| >= 3 that\n  // should work for all cameras.\n  //\n  // It is worth noting that during calibration, a low pass filter\n  // over pixelSum might have also worked for reducing noise.\n  const zstats = runningStats(windowSize);\n\n  let ready = false;\n  let bang = null;\n  let now = Date.now();\n\n  /** @type {() => number} */\n  const getPixelSum = () =>\n    $pixelReduce((acc, color) => {\n      return acc + color[0] + color[1] + color[2];\n    }, 0);\n\n  const clear = () => {\n    stats.clear();\n    zstats.clear();\n    bang = null;\n  };\n\n  onMount(() => {\n    const interval = setInterval(() => {\n      const pixelSum = getPixelSum();\n      const { mean, std } = $stats;\n      const { mean: zmean, std: zstd } = $zstats;\n\n      const zscore = pixelSum - mean;\n      const zzscore = Math.ceil(Math.abs((zscore - zmean) / (zstd + 10)));\n\n      ready = stats.ready();\n      now = Date.now();\n\n      if (stats.ready()) {\n        if (bang === null && Math.abs(zzscore) > 2) {\n          console.log('BANG', zzscore, Date.now());\n          bang = Date.now();\n        }\n      }\n      // calibrate still frame statistics during calibration period\n      // pixelSum > 0 will be true when the video has loaded\n      else if (pixelSum > 0) {\n        stats.addData(pixelSum);\n        zstats.addData(zscore);\n      }\n    }, pollIntervalMs);\n\n    return () => {\n      clearInterval(interval);\n      clear();\n    };\n  });\n</script>\n\n<main>\n  <button on:click={clear}> Reset Stats </button>\n\n  {#if !ready}\n    <p>Calibrating...</p>\n  {:else if bang === null}\n    <p>Waiting for movement...</p>\n  {:else}\n    <p>BANG! {Math.floor((now - bang) / 1000)}s</p>\n  {/if}\n</main>\n\n<style>\n  :global(body) {\n    display: flex;\n    flex-direction: row;\n    gap: 2rem;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAyFU,IAAI,AAAE,CAAC,AACb,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,GAAG,CAAE,IAAI,AACX,CAAC"
}